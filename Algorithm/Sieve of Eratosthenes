#include <iostream>
#include <vector>
using namespace std;

const int MAX = 1000000;
bool is_prime[MAX + 1];

void check() {
    for (int i = 2; i <= MAX; i++) {
        is_prime[i] = true;
    }

    for (int i = 2; i * i <= MAX; i++) {
        if (is_prime[i]) {
            for (int j = i * i; j <= MAX; j += i) {
                is_prime[j] = false;
            }
        }
    }
}

int main() {
    int M, N;
    cin >> M >> N;

    check();  // 소수를 판별

    for (int i = M; i <= N; i++) {
        if (is_prime[i]) {
            cout << i << '\n';
        }
    }

    return 0;
}

----------------------------------------------------------------
//에라토스테네츠의 체
//범위안에서 소수 판별하기 매우 쉽다. 그러나 특정한 값이 지정되었을 때에는 윌슨의 정리, 페르마의 소수판별법과 같은 소수 판정법이 훨씬 낫다.
/*
ex) 100까지의 소수
2의 배수를 모두 없앰
3의 배수를 모두 없앰
4 : 2의배수에서 걸러짐
5의 배수를 모두 없앰
6 : 2,3의 배수에서 걸러짐
7의 배수를 모두없앰
8 : 2의배수에서 걸러짐
9 : 3의 배수에서 걸러짐
10 : 2의배수에서 걸러짐
11 : 11의 제곲이 121은 100을 넘기때문에 할필요가 없음.
11의 배수인 22 33 등은 이미 앞에서 걸러짐. --> 범위 N까지수중에서 N의 제곱근까지만 계산하면 됨.
*/
