#include <iostream>
#include <vector>
using namespace std;

vector<int> graph[1001]; // 그래프를 나타내는 인접 리스트
bool visited[1001];

void dfs(int node) {
    visited[node] = true;
    for(int next : graph[node]) {
        if(!visited[next]) {
            dfs(next);
        }
    }
}

int main() {
    int N, M; // 정점의 개수 N, 간선의 개수 M
    cin >> N >> M;

    for(int i = 0; i < M; i++) { 
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u); 
    }

    int components = 0; // 연결 요소의 개수
    for(int i = 1; i <= N; i++) {
        if(!visited[i]) {
            dfs(i);
            components++;  
        }
    }

    cout << components; // 연결 요소의 개수 출력
    return 0;
}

//인접리스트의 활용
//vector<int> arr[1001]로 저장공간을 선언하면 1001개의 배열들이 병렬적으로 있는 구조로 선언됨(2차원 벡터와 비슷한구조)
//*전연변수로 선언하면 모든 값이 0으로 초기화 되기때문에 bool형태의 배열에서는 0 즉, false값을 기본으로 가짐.
//양방향으로 저장을 한 후에 1부터시작해서 정점의 갯수만큼 for문으로 돌림. 그러면 연결요소의 개수를 알 수 있음.
