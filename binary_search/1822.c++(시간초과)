#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

vector<int> arr_res;
int A,B;

bool binary_search(int target,vector<int> arr_b)
{
    int min = 0;
    int max = B-1;
    int mid;

    while(min < max) {
        mid = (min+max) / 2;

        if(arr_b[mid] > target) {
            max = mid - 1;
        }
        else if(arr_b[mid] < target) {
            min = mid + 1;
        }
        else if(arr_b[mid] == target){
            return true;
        }   
    }

    return false;
}

int main(void)
{
    cin >> A >> B;

    vector<int> arr_a(A);
    vector<int> arr_b(B);

    for(int i=0; i<A; i++)
    {
        cin >> arr_a[i];
    }
    for(int i=0; i<B; i++)
    {
        cin >> arr_b[i];
    }

    sort(arr_a.begin(),arr_a.end());
    sort(arr_b.begin(),arr_b.end());

    for(int i=0; i<A; i++) {
        if(!binary_search(arr_a[i],arr_b))
        {
            arr_res.push_back(arr_a[i]);
        }
    }

    //sort(arr_res.begin(),arr_res.end());
    cout << arr_res.size() << "\n";
    for(int num : arr_res)
    {
        cout << num << " ";
    }

    return 0;
}

//이분탐색으로 풀게되면 시간복잡도 O가 A의원소개수를 N, B배열의 원소개수를 M이라고 할때 O(n log m)이 걸리기 때문에 효율적이지 않을 수 있음
//이분탐색을 한번하는데 걸리는 시간복잡도 O는 기본적으로 (log m)의 시간복잡도를 가짐.
//따라서 문제를 풀기 위해서는 더 빠르게 풀 수 있는 투 포인터 알고리즘 기법을 사용해야함.
